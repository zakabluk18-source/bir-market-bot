# bot.py ‚Äî –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –±–æ—Ç —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∞–π—Å–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import os
import time
import asyncio
from threading import Thread
from flask import Flask

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
PRICES_DIR = "prays"  # –ü–∞–ø–∫–∞ —Å –ø—Ä–∞–π—Å–∞–º–∏

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
current_files = {
    "general": None,
    "import": None,
    "craft": None,
    "cider": None,
    "water": None,
    "energy_drinks": None,
    "baltika": None,
    "ab_inbev": None,
    "oph": None
}

# === –§—É–Ω–∫—Ü–∏—è: –Ω–∞–π—Ç–∏ —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π PDF –ø–æ –∫–ª—é—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "general") ===
def get_latest_price_file(filename_key):
    try:
        if not os.path.exists(PRICES_DIR):
            print(f"‚ùå –ü–∞–ø–∫–∞ {PRICES_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        files = [f for f in os.listdir(PRICES_DIR) 
                if f.lower().endswith(".pdf") and filename_key.lower() in f.lower()]
        
        if not files:
            return None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π –¥–∞—Ç–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è
        latest = max(files, key=lambda f: os.path.getmtime(os.path.join(PRICES_DIR, f)))
        return os.path.join(PRICES_DIR, latest)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–π—Å–∞ –¥–ª—è {filename_key}: {e}")
        return None

# === –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞–π—Å–æ–≤ ===
def monitor_price_files():
    global current_files
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞–π—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–µ —Ñ–∞–π–ª—ã
    for key in current_files:
        current_files[key] = get_latest_price_file(key)
        if current_files[key]:
            print(f"üìÅ {key}: {current_files[key]}")
        else:
            print(f"üìÅ {key}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    while True:
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        for key in current_files:
            latest = get_latest_price_file(key)
            if latest and latest != current_files[key]:
                old = current_files[key]
                current_files[key] = latest
                filename = os.path.basename(latest)
                print(f"‚ùó –û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–∞–π—Å: {key} ‚Üí {filename}")
                
                # üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                try:
                    bot = Bot(token=BOT_TOKEN)
                    caption = f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–∞–π—Å: *{key}* ‚Üí `{filename}`"
                    asyncio.run(bot.send_message(chat_id=YOUR_USER_ID, text=caption, parse_mode="Markdown"))
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
YOUR_USER_ID = int(os.getenv("YOUR_USER_ID"))

if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
if not YOUR_USER_ID:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω YOUR_USER_ID –≤ —Ñ–∞–π–ª–µ .env")

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞—è–≤–æ–∫ ===
STATE_WAITING_NAME = "waiting_name"
STATE_WAITING_COMPANY = "waiting_company"
STATE_WAITING_PHONE = "waiting_phone"
STATE_WAITING_ORDER = "waiting_order"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏")],
        [KeyboardButton("–ò–º–ø–æ—Ä—Ç–Ω–æ–µ –ø–∏–≤–æ")],
        [KeyboardButton("–ö—Ä–∞—Ñ—Ç-–ø–∏–≤–æ")],
        [KeyboardButton("üçé –°–∏–¥—Ä—ã")],
        [KeyboardButton("üö´üç∫ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–µ")],
        [KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_non_alcohol_keyboard():
    keyboard = [
        [KeyboardButton("üíß –í–æ–¥–∞")],
        [KeyboardButton("‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏")],
        [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_keyboard()
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # === –°–±–æ—Ä –∑–∞—è–≤–∫–∏ ===
    if context.user_data.get("state") == STATE_WAITING_NAME:
        context.user_data["name"] = text
        context.user_data["state"] = STATE_WAITING_COMPANY
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

    elif context.user_data.get("state") == STATE_WAITING_COMPANY:
        context.user_data["company"] = text
        context.user_data["state"] = STATE_WAITING_PHONE
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67):")

    elif context.user_data.get("state") == STATE_WAITING_PHONE:
        context.user_data["phone"] = text
        context.user_data["state"] = STATE_WAITING_ORDER
        await update.message.reply_text(
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ:\n"
            "‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "‚Äî –û–±—ä—ë–º (–ª–∏—Ç—Ä—ã, —è—â–∏–∫–∏)\n"
            "‚Äî –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
        )

    elif context.user_data.get("state") == STATE_WAITING_ORDER:
        context.user_data["order"] = text
        name = context.user_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        company = context.user_data.get("company", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        phone = context.user_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        order = context.user_data.get("order", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        time_str = update.message.date.strftime("%d.%m.%Y %H:%M")

        application_text = (
            "üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>:\n\n"
            f"üë§ <b>–ò–º—è:</b> {name}\n"
            f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üì¶ <b>–ó–∞–∫–∞–∑:</b> {order}\n"
            f"‚è± <b>–í—Ä–µ–º—è:</b> {time_str}"
        )

        try:
            await context.bot.send_message(
                chat_id=YOUR_USER_ID,
                text=application_text,
                parse_mode="HTML"
            )
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())
        context.user_data.clear()

    # === –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ===
    elif text == "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏":
        keyboard = [
            [KeyboardButton("üç∫ –ë–∞–ª—Ç–∏–∫–∞")],
            [KeyboardButton("üåç ABInBev")],
            [KeyboardButton("üè≠ –û–ü–•")],
            [KeyboardButton("üì¶ –û–±—â–∏–π –ø—Ä–∞–π—Å")],
            [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=reply_markup)

    elif text == "üì¶ –û–±—â–∏–π –ø—Ä–∞–π—Å":
        file_path = current_files.get("general")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(
                        pdf,
                        caption="üìÑ <b>–û–±—â–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</b>\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ",
                        parse_mode="HTML"
                    )
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "–ò–º–ø–æ—Ä—Ç–Ω–æ–µ –ø–∏–≤–æ":
        file_path = current_files.get("import")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(pdf, caption="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –ò–º–ø–æ—Ä—Ç–Ω–æ–µ –ø–∏–≤–æ")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "–ö—Ä–∞—Ñ—Ç-–ø–∏–≤–æ":
        file_path = current_files.get("craft")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(pdf, caption="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –ö—Ä–∞—Ñ—Ç-–ø–∏–≤–æ")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "üçé –°–∏–¥—Ä—ã":
        file_path = current_files.get("cider")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(pdf, caption="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –°–∏–¥—Ä—ã")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "üö´üç∫ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–µ":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_non_alcohol_keyboard())

    elif text == "üíß –í–æ–¥–∞":
        file_path = current_files.get("water")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(pdf, caption="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –í–æ–¥–∞")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏":
        file_path = current_files.get("energy_drinks")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(pdf, caption="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        context.user_data["state"] = STATE_WAITING_NAME
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
            "üìû +7 (999) 123-45-67\n"
            "üìß zakabluk18@yandex.ru",
            reply_markup=get_main_keyboard()
        )

    elif text == "üç∫ –ë–∞–ª—Ç–∏–∫–∞":
        file_path = current_files.get("baltika")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(pdf, caption="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –ë–∞–ª—Ç–∏–∫–∞")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "üåç ABInBev":
        file_path = current_files.get("ab_inbev")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(pdf, caption="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: ABInBev")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "üè≠ –û–ü–•":
        file_path = current_files.get("oph")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(pdf, caption="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –û–ü–•")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (Flask) ===
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ —Å–±–æ–µ ===
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞–π—Å–æ–≤ –≤ —Ñ–æ–Ω–µ
    monitor_thread = Thread(target=monitor_price_files, daemon=True)
    monitor_thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    while True:
        try:
            # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
            application = Application.builder().token(BOT_TOKEN).build()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
            application.add_handler(CommandHandler("start", start))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
            application.run_polling()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
