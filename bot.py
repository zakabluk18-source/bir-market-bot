# bot.py ‚Äî –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏ —Ä–∞–±–æ—á–∏–π Telegram-–±–æ—Ç

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import os
import time
from threading import Thread
from flask import Flask

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
bot_instance = None
application_instance = None  # –ë—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –ø–æ–∑–∂–µ

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
LOG_FILE = "users.txt"

def log_user(update: Update):
    user = update.effective_user
    time_str = update.message.date.strftime("%Y-%m-%d %H:%M:%S") if update.message and update.message.date else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    username = f"@{user.username}" if user.username else "–Ω–µ—Ç"
    
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"{time_str} | ID: {user.id} | username: {username} | full_name: {user.full_name}\n")
    
    print(f"üë§ –ó–∞–ª–æ–≥–∏–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{username}) ‚Äî {user.id}")

def get_user_count():
    if not os.path.exists(LOG_FILE):
        print(f"üü° –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {LOG_FILE}")
        return 0
    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
            count = len([line for line in lines if line.strip()])
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
            return count
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.txt: {e}")
        return 0

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
PRICES_DIR = "prays"

current_files = {
    "general": None,
    "import": None,
    "craft": None,
    "cider": None,
    "water": None,
    "energy_drinks": None,
    "baltika": None,
    "ab_inbev": None,
    "oph": None
}

def get_latest_price_file(filename_key):
    try:
        if not os.path.exists(PRICES_DIR):
            print(f"‚ùå –ü–∞–ø–∫–∞ {PRICES_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None

        files = [
            f for f in os.listdir(PRICES_DIR)
            if f.lower().endswith(".pdf") and filename_key.lower() in f.lower()
        ]
        
        if not files:
            return None

        latest_file = max(
            files,
            key=lambda f: os.path.getmtime(os.path.join(PRICES_DIR, f))
        )
        return os.path.join(PRICES_DIR, latest_file)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–π—Å–∞ –¥–ª—è {filename_key}: {e}")
        return None

# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞–π—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
def monitor_price_files():
    global bot_instance, application_instance
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞–π—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    for key in current_files:
        current_files[key] = get_latest_price_file(key)
        if current_files[key]:
            print(f"üìÅ {key}: {current_files[key]}")
        else:
            print(f"üìÅ {key}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    while True:
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        for key in current_files:
            latest = get_latest_price_file(key)
            if latest and latest != current_files[key]:
                current_files[key] = latest
                filename = os.path.basename(latest)
                print(f"‚ùó –û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–∞–π—Å: {key} ‚Üí {filename}")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if bot_instance and application_instance:
                    try:
                        caption = f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–∞–π—Å: *{key}* ‚Üí `{filename}`"
                        asyncio.run_coroutine_threadsafe(
                            bot_instance.send_message(
                                chat_id=YOUR_USER_ID,
                                text=caption,
                                parse_mode="Markdown"
                            ),
                            application_instance.loop  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º loop –∏–∑ application
                        )
                    except Exception as e:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
YOUR_USER_ID = os.getenv("YOUR_USER_ID")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env")
if not YOUR_USER_ID:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω YOUR_USER_ID –≤ .env")

try:
    YOUR_USER_ID = int(YOUR_USER_ID)
except ValueError:
    raise ValueError("‚ùå YOUR_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞—è–≤–æ–∫ ===
STATE_WAITING_NAME = "waiting_name"
STATE_WAITING_COMPANY = "waiting_company"
STATE_WAITING_PHONE = "waiting_phone"
STATE_WAITING_ORDER = "waiting_order"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏")],
        [KeyboardButton("–ò–º–ø–æ—Ä—Ç–Ω–æ–µ –ø–∏–≤–æ")],
        [KeyboardButton("–ö—Ä–∞—Ñ—Ç-–ø–∏–≤–æ")],
        [KeyboardButton("üçé –°–∏–¥—Ä—ã")],
        [KeyboardButton("üö´üç∫ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω–æ–µ")],
        [KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_non_alcohol_keyboard():
    keyboard = [
        [KeyboardButton("üíß –í–æ–¥–∞")],
        [KeyboardButton("‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏")],
        [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user(update)
    user_count = get_user_count()
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n"
        f"–í—ã ‚Äî {user_count}-–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –±–æ—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_keyboard()
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # === –°–±–æ—Ä –∑–∞—è–≤–∫–∏ ===
    if context.user_data.get("state") == STATE_WAITING_NAME:
        context.user_data["name"] = text
        context.user_data["state"] = STATE_WAITING_COMPANY
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

    elif context.user_data.get("state") == STATE_WAITING_COMPANY:
        context.user_data["company"] = text
        context.user_data["state"] = STATE_WAITING_PHONE
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67):")

    elif context.user_data.get("state") == STATE_WAITING_PHONE:
        context.user_data["phone"] = text
        context.user_data["state"] = STATE_WAITING_ORDER
        await update.message.reply_text(
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ:\n"
            "‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "‚Äî –û–±—ä—ë–º (–ª–∏—Ç—Ä—ã, —è—â–∏–∫–∏)\n"
            "‚Äî –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
        )

    elif context.user_data.get("state") == STATE_WAITING_ORDER:
        context.user_data["order"] = text
        name = context.user_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        company = context.user_data.get("company", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        phone = context.user_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        order = context.user_data.get("order", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        time_str = update.message.date.strftime("%d.%m.%Y %H:%M") if update.message and update.message.date else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        application_text = (
            "üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>:\n\n"
            f"üë§ <b>–ò–º—è:</b> {name}\n"
            f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üì¶ <b>–ó–∞–∫–∞–∑:</b> {order}\n"
            f"‚è± <b>–í—Ä–µ–º—è:</b> {time_str}"
        )

        try:
            await context.bot.send_message(
                chat_id=YOUR_USER_ID,
                text=application_text,
                parse_mode="HTML"
            )
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())
        context.user_data.clear()

    # === –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ===
    elif text == "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏":
        keyboard = [
            [KeyboardButton("üç∫ –ë–∞–ª—Ç–∏–∫–∞")],
            [KeyboardButton("üåç ABInBev")],
            [KeyboardButton("üè≠ –û–ü–•")],
            [KeyboardButton("üì¶ –û–±—â–∏–π –ø—Ä–∞–π—Å")],
            [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=reply_markup)

    elif text == "üì¶ –û–±—â–∏–π –ø—Ä–∞–π—Å":
        file_path = current_files.get("general")
        if file_path and os.path.exists(file_path):
            try:
                with open(file_path, "rb") as pdf:
                    await update.message.reply_document(
                        document=pdf,
                        caption="üìÑ <b>–û–±—â–∏–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</b>\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ",
                        parse_mode="HTML"
                    )
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_keyboard())

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )

# === Flask –¥–ª—è keep-alive ===
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

def keep_alive():
    thread = Thread(target=run_flask, daemon=True)
    thread.start()

# === /admin ===
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"üîπ /admin –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_id}")
    print(f"üîπ –û–∂–∏–¥–∞–µ–º—ã–π ID –∞–¥–º–∏–Ω–∞: {YOUR_USER_ID}")
    print(f"üîπ –¢–∏–ø user_id: {type(user_id)}, —Ç–∏–ø YOUR_USER_ID: {type(YOUR_USER_ID)}")

    if user_id != YOUR_USER_ID:
        print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    count = get_user_count()
    print(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    global bot_instance, application_instance

    application = Application.builder().token(BOT_TOKEN).build()
    application_instance = application
    bot_instance = application.bot

    # === –õ–û–ì–ì–ï–†: –ª–æ–≤–∏–º –≤—Å—ë –ø–µ—Ä–≤—ã–º ===
    async def log_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"üì• –ü–†–ò–®–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–ï: {update.to_dict()}")

    application.add_handler(MessageHandler(filters.ALL, log_update), group=0)

    # === –•–ï–ù–î–õ–ï–†–´ ===
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_stats))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # === –ó–∞–ø—É—Å–∫ Flask –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
    keep_alive()
    Thread(target=monitor_price_files, daemon=True).start()

    # === –û—Ç–ª–∞–¥–∫–∞ ===
    print(f"üîß –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"üîß –ê–¥–º–∏–Ω ID: {YOUR_USER_ID} (—Ç–∏–ø: {type(YOUR_USER_ID)})")
    print(f"üîß BOT_TOKEN: {BOT_TOKEN[:10]}... (–∑–∞–≥—Ä—É–∂–µ–Ω)")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ Telegram.")

    # === –ó–∞–ø—É—Å–∫ ===
    await application.run_polling()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
