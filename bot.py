# bot.py
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from threading import Thread
import asyncio

# === –¢–û–ö–ï–ù –ò –ê–î–ú–ò–ù ===
TOKEN = os.getenv("TOKEN", "8475405331:AAH-kBpTIX6P-f3o3OwUAecniiUYQtZTt1E")
ADMIN_ID = int(os.getenv("ADMIN_ID", "50420118"))

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê "–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ" ===
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# === –ö–û–ú–ê–ù–î–ê /start ===
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="federal")],
        [InlineKeyboardButton("–ò–º–ø–æ—Ä—Ç–Ω–æ–µ –ø–∏–≤–æ", callback_data="import")],
        [InlineKeyboardButton("–ö—Ä–∞—Ñ—Ç-–ø–∏–≤–æ", callback_data="craft")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "federal":
        keyboard = [
            [InlineKeyboardButton("üç∫ –ë–∞–ª—Ç–∏–∫–∞", callback_data="baltika")],
            [InlineKeyboardButton("üåç ABInBev", callback_data="ab_inbev")],
            [InlineKeyboardButton("üè≠ –û–ü–•", callback_data="oph")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "baltika":
        with open("prays/baltika.pdf", "rb") as pdf:
            await query.message.reply_document(pdf, caption="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –ë–∞–ª—Ç–∏–∫–∞")
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif query.data == "ab_inbev":
        with open("prays/ab_inbev.pdf", "rb") as pdf:
            await query.message.reply_document(pdf, caption="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: ABInBev")
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif query.data == "oph":
        with open("prays/oph.pdf", "rb") as pdf:
            await query.message.reply_document(pdf, caption="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –û–ü–•")
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif query.data == "import":
        with open("prays/import.pdf", "rb") as pdf:
            await query.message.reply_document(pdf, caption="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –ò–º–ø–æ—Ä—Ç–Ω–æ–µ –ø–∏–≤–æ")
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif query.data == "craft":
        with open("prays/craft.pdf", "rb") as pdf:
            await query.message.reply_document(pdf, caption="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: –ö—Ä–∞—Ñ—Ç-–ø–∏–≤–æ")
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif query.data == "contacts":
        await query.edit_message_text(
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\nüìû +7 (999) 123-45-67\nüìß zakabluk18@yandex.ru",
            reply_markup=main_menu_keyboard()
        )

    elif query.data == "main_menu":
        keyboard = [
            [InlineKeyboardButton("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="federal")],
            [InlineKeyboardButton("–ò–º–ø–æ—Ä—Ç–Ω–æ–µ –ø–∏–≤–æ", callback_data="import")],
            [InlineKeyboardButton("–ö—Ä–∞—Ñ—Ç-–ø–∏–≤–æ", callback_data="craft")],
            [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))


# === –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER ===
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    # === –ó–ê–ü–£–°–ö –ë–û–¢–ê –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï ===
    def run_bot():
        asyncio.set_event_loop(asyncio.new_event_loop())
        application.run_polling(allowed_updates=[], stop_signals=None)

    bot_thread = Thread(target=run_bot)
    bot_thread.start()

    # === –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER (–∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞) ===
    from http.server import HTTPServer, BaseHTTPRequestHandler

    class HealthCheckHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(b"Bot is alive and running on Render!")

    port = int(os.environ.get("PORT", 8000))

    def run_server():
        server = HTTPServer(("", port), HealthCheckHandler)
        print(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        server.serve_forever()

    server_thread = Thread(target=run_server)
    server_thread.start()
